package mymath;

/**
 * @author Administrator
 * 单纯形法
 * 
 * 第一行第一个数字为1代表求目标函数的最大值，-1代表求目标函数的最小值；
 * 第二个数字代表约束条件的个数；
 * 第三个数字代表变量个数；
 * 第四、五、六个数字分别代表≤的约束条件个数，=的约束条件个数，≥的约束条件个数；
 * 接下来输入约束条件的系数矩阵和右端项，注意按照≤，=，≥的顺序；
 * 最后按照变量下标顺序输入目标函数的价值系数；

-1 3 3 1 1 1
1 -2 1 11
-2 0 1 1
-4 1 2 3
-3 1 1

代表：

       (x1)-2(x2)+(x3)<=11
      -2(x1)      +(x3)=1
      -4(x1)+(x2)+2(x3)>=3

min z=-3(x1)+(x2)+(x3)
 *
 */
public class xx_Test {

	/**
	 * @param args 线性规划 单纯型法
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		double a[][] = {{0,1,1,1,1,1,0,12},{0,0,1,1,1,1,1,15},{1,0,0,1,1,1,1,12},{1,1,0,0,1,1,1,14},{1,1,1,0,0,1,1,16},{1,1,1,1,0,0,1,18},{1,1,1,1,1,0,0,19}};
//		int x[] = {200,200,200,200,200,200,200};
		
//		double a[][] = {{1,1,2},{1,2,2}};
//		int x[] = {2,2};
		
//		double a[][] = {{1,0,0,1,0,0,14},{0,1,0,0,1,0,6.3},{0,0,1,0,0,1,0.0252},{-0.0675989,1,0,0,0,0,0}
//		,{-0.00224432,0,1,0,0,0,0},{0,0,0,-0.2202052,1,0,0},{0,0,0,-0.00084634,0,1,0}};
//		int x[] = {1,1,1,1,1,1,1};
		
		double a[][] = {{1,0,0,1,0,0,14},{0,1,0,0,1,0,0.024796},{0,0,1,0,0,1,7.3041108},{-0.0022432,1,0,0,0,0,0}
		,{-0.675989,0,1,0,0,0,0},{0,0,0,-0.00084634,1,0,0},{0,0,0,-0.2202052,0,1,0}};
		int x[] = {1,1,1,1,1,1,1};
		
		int i=0;
		int j=0;
		System.out.println("第一行第一个数字为1代表求目标函数的最大值,-1代表求目标函数的最小值; ");
		System.out.println("第二个数字代表约束条件的个数；");
		System.out.println("第三个数字代表变量个数;");
		System.out.println("第四、五、六个数字分别代表≤的约束条件个数，=的约束条件个数，≥的约束条件个数；");
		System.out.println("接下来输入约束条件的系数矩阵和右端项，注意按照≤，=，≥的顺序；");
		System.out.println("最后按照变量下标顺序输入目标函数的价值系数；");
		System.out.println("系数矩阵");
		System.out.println("-1 7 7 0 0 7");
		System.out.println("系数矩阵");
		for(i=0;i<a.length;i++)
		{
			for(j=0;j<a[i].length;j++)
			{
				System.out.print(a[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println("目标函数的价值系数");
		for(i=0;i<x.length;i++)
		{
			System.out.print(x[i]+" ");
		}
		System.out.println();
	//	xx lp = new xx(-1,7,7,0,0,7,a,x);
		xx lp = new xx(-1,7,6,0,0,7,a,x);
		lp.solve();

	}

}
